一、基于dockerfile，实现分层构建nginx业务镜像
1. 首先从官方下载ubuntu:v22.04的官方镜像,创建system-base镜像目录和dockerfile
mkdir -p /opt/20221023/system-base
cat > dockerfile << EOF

FROM ubuntu:22.04
MAINTAINER "jack 2973707860@qq.com"

RUN apt update && apt install -y  iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute gcc openssh-server lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev ntpdate tcpdump telnet traceroute iotop unzip zip make
EOF

构建ubuntu-base镜像并保证镜像能正常运行
docker build -t harbor.magedu.net/mtserver/ubuntu-base:22.04  .   
docker run -it --rm  harbor.magedu.net/mtserver/ubuntu-base:22.04 

2. 构建nginx-base镜像
mkdir -p /opt/20221023/nginx-base
从官网下载nginx-1.22.1.tar.gz的压缩包并拷贝至/opt/20221023/nginx-base 目录
cat > dockerfile << EOF
FROM harbor.magedu.net/mtserver/ubuntu-base-22.04

ADD nginx-1.22.1.tar.gz  /usr/local/src/
RUN cd /usr/local/src/nginx-1.22.1 && ./configure  --prefix=/apps/nginx && make && make install && ln -sv /apps/nginx/sbin/nginx  /usr/bin
EOF

构建nginx-base镜像并保证镜像能正常运行
docker build -t harbor.magedu.net/mtserver/nginx-base:1.22.1  .
docker run -it  -p 80:80 --rm harbor.magedu.net/mtserver/nginx-base:1.22.1 
3. 构建nginx业务镜像
mkdir -p  /opt/20221023/nginx-web1
将业务网站代码和nginx配置文件拷贝至 /opt/20221023/nginx-web1
cat > dockerfile << EOF
FROM harbor.magedu.net/mtserver/nginx-base:v1.22.1

RUN  groupadd  -g 2088 nginx  && useradd -g nginx -s /usr/sbin/nologin -u 2088 nginx && chown -R nginx.nginx /apps/nginx
ADD nginx.conf  /apps/nginx/conf/
ADD frontend.tar.gz  /apps/nginx/html
ENTRYPOINT ["/apps/nginx/sbin/nginx","-g","daemon off;"]
EOF
构建nginx-base镜像并测试镜像
docker build -t harbor.magedu.net/mtserver/myserver-web1:v1 .
docker run -it --rm -p80:80 harbor.magedu.net/mtserver/myserver-web1:v1 

二、基于docker 实现对容器的cpu和内存的资源限制
下载docker 压测工具
docker pull lorel/docker-stress-ng  
内存限制 
docker run -it --rm --name magedu-c1 -m 256m  lorel/docker-stress-ng:latest --vm 2 --vm-bytes 256M  
cpu限制  
docker run -it --rm --name magedu-c1  --cpus 2 lorel/docker-stress-ng:latest --cpu 4 --vm 4
将容器运行到指定的cpu上 
docker run -it --rm --name magedu-c1  --cpuset-cpus 2,3  lorel/docker-stress-ng:latest --cpu 4 --vm 4

三、部署http协议的harbor镜像仓库
1. harbor 仓库依赖docker和docker-compose，需要先下载并安装docker(harbor仓库要求docker至少在 17.06.0-ce之上，docker-compose 在1.18.0之上)
安装docker 后 docker info  和docker-compose 验证版本
2. 下载harbor软件包
wget  https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz
mkdir /apps; cd /apps
tar -xvf harbor-offline-installer-v2.6.1.tgz  
cp harbor.yml.tmpl  harbor.yml
vim  harbor.yml
修改hostname为harbor.magedu.net
注释掉https四行
修改harbor_admin_password为12345678
./install.sh --with-trivy --with-chartmuseum  安装harbor 仓库
添加域名到本地hosts解析
2. 修改镜像构建服务器daemon.json 配置文件并重启docker服务
vim /etc/docker/daemon.json
insecure-registries 添加 harbor.magedu.com 
systemctl restart docker.service
3. 登录harbor仓库
添加harbor 地址到/etc/hosts
docker login harbor.magedu.net
docker tag harbor.magedu.net/mtserver/myserver-web1:v2 harbor.magedu.net/magedu/myserver-web1:v2  修改镜像tag标签
docker push harbor.magedu.net/magedu/myserver-web1:v2  上传到harbor镜像

扩展作业：
安装 containerd 
1: 安装必要的一些系统工具
sudo apt-get update
sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
2: 安装GPG证书
curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
3: 写入软件源信息
sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
4: 查看containerd版本
apt-cache madison containerd.io
apt install -y containerd.io
5.配置containerd的配置文件
containerd config default 查看containerd的配置文件
containerd config default > /etc/containerd/config.toml  覆盖containerd 原有配置文件
修改配置文件
vim /etc/containerd/config.toml
61 sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.7”
153 [plugins."io.containerd.grpc.v1.cri".registry.mirrors]  镜像加速器配置
154   [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
155     endpoint = ["https://9916w1ow.mirror.aliyuncs.com"]
systemctl restart containerd && systemctl status  containerd  重启containerd检查状态
6.下载runc
wget https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
cp runc.amd64 /usr/bin/runc
chmod a+x /usr/bin/runc  添加可执行权限
runc -v    查看runc 版本
7.下载cni插件
wget https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
mkdir -p /opt/cni/bin
tar -xvf cni-plugins-linux-amd64-v1.1.1.tgz -C /opt/cni/bin/


基于nerdctl 拉取镜像和创建容器
wget https://github.com/containerd/nerdctl/releases/download/v0.23.0/nerdctl-0.23.0-linux-amd64.tar.gz
tar -xvf nerdctl-0.23.0-linux-amd64.tar.gz  -C /usr/bin
用nerdctl 拉取nginx 镜像
nerdctl  -n k8s.io  pull nginx:1.18.0-alpine
用nerdctl 启动nginx 镜像
nerdctl run -it --name=nginx  -p80:80  nginx:1.18.0-alpine 
